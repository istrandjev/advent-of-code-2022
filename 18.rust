use std::io::{self, Read};

fn main() -> io::Result<()> {
    let mut input = String::new();
    io::stdin().read_to_string(&mut input)?;
    let mut field = vec![vec![vec![0; 22]; 22]; 22];
    let lines = input.split("\n");
    for line in lines {
        let coords: Vec<&str> = line.split(",").collect();
        if coords.len() != 3 {
            break;
        }
        let int_coords: Vec<usize> = coords.iter().map(|x| x.parse::<usize>().expect("Error: Could not parse string as integer.")).collect();
        
        field[int_coords[0] + 1][int_coords[1] + 1][int_coords[2] + 1] = 1;
    }
    
    let moves = [[0, 0, 1], [0, 0, -1], [0, 1, 0], [0, -1, 0], [1, 0, 0], [-1, 0, 0]];
    let mut st = vec![[0, 0, 0]];
    while st.len() > 0 {
        let co = st.pop();
        let c = match co {
            Some(array) => [array[0], array[1], array[2]],
            None => {
                println!("This will never happen but Rust IS SO FUCKING AWESOME");
                [-1, -1, -1]
            },
        };
        field[c[0] as usize][c[1] as usize][c[2] as usize] = 2;
        for m in moves {
            let tx : i32 = c[0] + m[0];
            let ty : i32 = c[1] + m[1];
            let tz : i32 = c[2] + m[2];
            if tx < 0 || ty < 0 || tz < 0 || tx >= 22 || ty >= 22 || tz >= 22 {
                continue;
            }
            if field[tx as usize][ty as usize][tz as usize] != 0 {
                continue;
            }
            st.push([tx, ty, tz]);
        }
    }
    let mut res1 = 0;
    let mut res2 = 0;
    for x in 1..21 {
        for y in 1..21 {
            for z in 1..21 {
                if field[x as usize][y as usize][z as usize] != 1 {
                    continue
                }
                for m in moves {
                    let tx : i32 = x + m[0];
                    let ty : i32 = y + m[1];
                    let tz : i32 = z + m[2];
                    
                    if field[tx as usize][ty as usize][tz as usize] != 1 {
                        res1 += 1;
                    }
                    if field[tx as usize][ty as usize][tz as usize] == 2 {
                        res2 += 1;
                    }
                }
            }
        }
    }
    println!("{}", res1);
    println!("{}", res2);
    Ok(())
}
